Next: integration of User, Profile, FinancialProfile, Loan, Schedule, Payment models into the system.
-------------------------------------------------------------
CHECK EVERY PART OF THE SYSTEM IN ISOLATION:

(All files in here are created. The ones with the cross are not yet tested)

C:.
│   index.mjs
│
├───actors
│   ├───auth
│   │       extractToken.js (✅).
│   │       tokenExists.js (✅)
│   │       validatePayloadStrcture.js (✅)
│   │       verifyPassword.js (✅)
│   ├───financialProfile
│   │       updateFinancialProfileFields.js (❌)
│   ├───loan
│   │       createLoan.js (❌)
│   │       generateLoanId.js (❌)
│   │       simulateLoan.js (❌)
│   ├───utils
│   │       updateProfileFields.js (❌)
│   ├───retrievers
│   │       userRetriever.js (✅)🔁
│   │
│   ├───utils
│               hasControlChars.js (✅)
│               hasEmoji.js (✅) 
│               hasWhiteSpaces.js (✅)
│               isNotSymbol.js (✅)
│   └───validators
│       └───auth
│               checkUserUniqueness.js (✅)
│               loginResponse.js (✅)
│               validateEmailInput.js (✅)
│               validateLoginInput.js (✅)
│               validateName.js (✅)
│               validatePasswordInput.js (✅) 
│               validateRegistrationInput.js (✅)
│       └───loan
│               validateLoanInput.js (❌)
├───config
│       jwtConfig.js (🔁...) ✅
│       loanConfig.js (✅)
│       mock.loans.db.config.js (❌)
│       mock.users.db.config.js (✅)
│       passwordSecretConfig.js (✅)
│       registerData.js (✅)
│       userConfig.js (✅)
│
├───db
│       pool.js (❌)
├───controllers
│       authController.mjs (
          ✅registerUserController(),
          ✅loginUserController()
          ) 
│       financialProfileController.mjs (❌)
│       loanController.mjs (✅)
│       profileController.mjs (✅) 
│
├───entities
│       financialProfileEntity.js (❌)
│       loanEntity.js (❌)
│       paymentEntity.js (❌)
│       profileEntity.js (❌)
│       scheduleEntity.js (❌)
│       userEntity.js (✅)
│
├───errors
│       AppError.js (✅)
│       src\errors\authErrors.js (✅)
│       errorRegistry.js (✅) 
│       loanErrors.js (❌) 
│       mapError.js (✅)
│       profileErrors.js (✅)
│       registrationErrors.js (✅)
│       tokenError.js (✅)
│       TokenGenerationError.js (✅)
│
├───middlewares
│       authMiddleware.js (
            ✅tokenExists() (lives in token.js)
            ✅extractToken() 
            ✅verifyToken() 
            ✅decodePayload() (lives in token.js)
            ✅isTokenExpired
        ) ✅
│       errorHandler.js (✅)
│
├───models
│       financialProfileModel.js (❌)
│       loanModel.js (✅)
│       paymentModel.js (✅)
│       profileModel.js (✅)
│       scheduleModel.js (✅)
│       userModel.js (✅)
│
├───repositories
│       loanRepository.js (❌)
│       userRepo.js (
  ✅findUserByEmail
  ✅findUserById
  ✅saveUser
  ✅listUsers 
  ✅deleteUser
   5 inner functions)
│
├───routes
│   ├───auth
│   │       auth.route.js (❌)(in order to test this it is necessary to connect the methods to a real database.)
│   ├───financialProfile
│   │       financialProfile.route.js (❌) (in order to test this it is necessary to connect the methods to a real database.)
│   ├───loan
│   │       loanRoutes.js (❌) (in order to test this it is necessary to connect the methods to a real database.)
│   │
│   └───profile
│           profile.route.js (❌) (in order to test this it is necessary to connect the methods to a real database.)
│
├───services
│   ├───auth
│   │       registerUser.mjs (✅)
│   │
│   ├───loan
│   │       loanCalculator.js (
  ❌ calculateRepaymentCapacity 🔁
  ✅calculateMaxLoanCapacity
  ✅calculateCompoundInterest
  ✅fixedPaymentCalculation 
  ✅generateAmortizationSchedule
  ✅calculateInterestSaving
  ✅applyEarlyRepayment
  )
│   │
│   └───user
│           generateUserId.js (✅)
│           user.service.js (✅)
│
├───tests
│
└───utils
    └───auth
            comparePasswords.js (✅) 
            generateSignature.js (✅)
            hashPassword.js (✅)
            invalidateUserToken.js (✅)
            refreshToken.js (✅)
            token.js (
              ✅tokenExists
              ✅verifyToken
              ✅decodePayload
              ✅isTokenExpired 
              ) 
            tokenIssuer.js (✅)
            verifyToken.js (✅)



-----------------------------------------------------------------------WORKSPACE
TRELLO:https://trello.com/b/9ty2CCja/finance-advisor
--------------
MIRO:https://miro.com/welcomeonboard/WDh1Uy9JWlRjZUJQYkJuaS9wV2l2clVhbE1SVk5FVlVCbk1YSUVLRFhFY2VCdjUyN0h1VVdmNEZ0VFpxVGEwcHNDRjRvM3VHR3l4cUpoREdmRkFjdFp6b3R5dlZINCtLenBvV2s5WFlYb1Nmd0lRaGpVSVBlYkNCOStsZEtleVZyVmtkMG5hNDA3dVlncnBvRVB2ZXBnPT0hdjE=?share_link_id=208190572952
-----------------------------------------------------------------------DAY'S BACKLOG

- Use POSTMAN for register attempt [✅]
- Use POSTMAN for login attempt [✅]
- Use POSTMAN for secured routes access attempt [✅]

Please make sure that before each testing case actors are pure as much as possible. 
  +registerController[✅]
  +loginController[✅]

- CHECK TESTCASES:
  + TC-001 [] -> Valid registration -> login -> access to protected route.
    -> Input / Preconditions:
      + Purify actors as much as possible [solved]
    -> Actor: AuthService (encapsulation needed because AuthService is missing)
    -> Expected result: 200 OK + resource data.
    -> Status: Pending.
    RESULTS:
      -ERROR WHEN TRYING TO REGISTER WITH THE SAME INPUT MORE THAN ONCE
        ~check what happens when find an existing email in registering process [solved]
  + TC-002 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-003 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-004 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-005 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-006 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-007 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-008 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-009 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-010 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-011 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-012 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-013 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
--------------

-----------------------------------------------------------------------COURSE TASKS (must)

  1-GITHUB REPOSITORY (
    +Table of contents
      *Overview (✅)
      *Description (✅)
      *ERD (erd ✅, add it to the github REPOSITORY's content)
  )

  2-Implement authentication in your application.
    Assignment: Choose and implement one of the authentication methods we covered in class:
      -JWT (JSON Web Tokens) (chosen)
      -OAuth 2.0
    Important: You must implement the authentication logic from scratch without using ready-made 
      authentication libraries. This will help you understand how these protocols 
      work under the hood. (login process ❌)
  3-Create DB schema as diagram. In your application u should have at list 3 DB tables.
  4-Your task is to implement the database you designed in your diagram by creating executable SQL scripts.
    It can be any SQL database. If you don't know which to use - I recommend to use PostgreSQL.
    Requirements:
      4.1-Create a comprehensive SQL script (.sql file) that generates all tables, relationships, indexes,
        and constraints from your database diagram
--------------

-----------------------------------------------------------------------CORE FEATURES
🗂️ Suggested Categorization
    ✅ Core Logic
        -Basic loan calculation (✅)
        -Monthly payment calculation (✅)
        -Total repayment amount (✅)
        -Compound interest logic (✅)
        -Amortization schedule (✅)
        -Early repayment logic (✅)
        -Input validation (check)
--------------

-----------------------------------------------------------------------NOT CORE FEATURES
--------------
Notes:
- Test that CRUD functinalities are working for loan entity.
- The only entity that already has the CRUD is loans, the entire others also need it. So that is pending...
- Test that all CRUD functions are working for every entity.
.

🧭 Roadmap mínimo funcional extendido (4 días)
🟢 Día 1: Persistencia y validación de préstamos
✅ Completado

🟡 Día 2: Lectura y consulta + CRUD de usuarios
📄 Loans
[x] Repositorio getLoanById(id)

[x] Repositorio getLoans() ordenado por savedAt

[x] Test getLoanById() válido e inválido

[x] Test getLoans() incluye préstamo guardado

👤 Users
[ ] Tabla users con id, email, name, created_at

[ ] Repositorio saveUser(), getUserById()

[ ] Actor validateUserInput()

[ ] Test saveUser() válido e inválido

[ ] Test getUserById() válido e inexistente

🔵 Día 3: Actualización y eliminación + CRUD de perfiles y pagos
📄 Loans
[x] Repositorio updateLoan(id, updates) con validación

[x] Repositorio deleteLoan(id) con DELETE real

[x] Test updateLoan() válido e inválido

[x] Test deleteLoan() efectivo e idempotente

🧾 Financial Profiles
[ ] Repositorio updateFinancialProfile(id, updates)

[ ] Test updateFinancialProfile() válido e inválido

💳 Payments
[ ] Tabla payments con id, loan_id, amount, paid_at

[ ] Repositorio savePayment(), getPaymentsByLoan()

[ ] Actor validatePaymentInput()

[ ] Test savePayment() válido e inválido

[ ] Test getPaymentsByLoan() incluye pago guardado

🟣 Día 4: Modularidad final + CRUD de schedules
🧩 Helpers y actores
[x] Actor createMockFinancialProfile()

[x] Actor generateLoanId() y generateFinancialProfileId()

[x] Refactor de tests con beforeAll y helpers

[ ] createMockLoan() para setup completo

[ ] validateLoanUpdate() para updates parciales

[ ] generateValidUser(), generateValidPayment(), etc.

📅 Schedules
[ ] Tabla schedules con id, loan_id, due_date, expected_amount

[ ] Repositorio saveSchedule(), getScheduleByLoan()

[ ] Actor validateScheduleInput()

[ ] Test saveSchedule() válido e inválido

[ ] Test getScheduleByLoan() incluye cronograma

🎯 Resultado final en 4 días
CRUD completo para loan, user, profile, payment, schedule

Validación modular por entidad

Tests robustos para cada flujo

Helpers para setup DRY y trazable