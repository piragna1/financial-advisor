-------------------------------------------------------------
PS C:\Users\Gonzalo\Documents\GitHub\solvd_laba\personalProject\financial-advisor\src> tree /f
Folder PATH listing
Volume serial number is 6E99-5812
C:.
│   index.mjs
│   
├───actors
│   ├───auth
│   │       extractToken.js ✅
│   │       tokenExists.js✅
│   │       validatePayloadStructure.js✅
│   │       verifyPassword.js✅
│   │       
│   ├───financialProfile
│   │       generateFinancialProfileId.js✅
│   │       updateFinancialProfileFields.js✅
│   │       
│   ├───loan
│   │       generateLoanId.js✅
│   │       simulateLoan.js❌
│   │       
│   ├───normalizers
│   │   └───payment
│   │           normalizePayment.js✅
│   │
│   ├───payment
│   ├───profile
│   │       updateProfileFields.js✅
│   │
│   ├───retrievers
│   │       userRetriever.js❌
│   │
│   ├───schedule
│   ├───users
│   │       checkEmailAvailability.js❌
│   │       normalizeEmail.js✅
│   │
│   ├───utils
│   │       hasControlChars.js✅
│   │       hasEmoji.js✅
│   │       hasWhiteSpaces.js✅
│   │       isNotSymbol.js✅
│   │
│   └───validators
│       ├───auth
│       │       loginResponse.js✅
│       │       validateEmailInput.js✅
│       │       validateLoginInput.js❌
│       │       validateName.js❌
│       │       validatePasswordInput.js❌
│       │       validateRegistrationInput.js❌
│       │       validateToken.js✅
│       │
│       ├───loan
│       │       validateBalloonPayment.js✅
│       │       validateCompoundingFrequencyPerYear.js✅
│       │       validateCurrency.js ✅
│       │       validateGracePeriodMonths.js✅
│       │       validateInterestRate.js✅
│       │       validateLoanInput.js<----
│       │       validateLoanType.js
│       │       validatePaymentFrequencyPerYear.js
│       │       validatePrincipal.js
│       │       validateStartDate.js
│       │       validateTermYears.js
│       │
│       └───payment
│               validateAmount.js✅
│               validateCurrency.js✅
│               validateDueDate.js✅
│               validateNotes.js✅
│               validatePaidAt.js✅
│               validatePaymentId.js
│               validatePaymentInput.js
│               validatePaymentMethod.js✅
│               validatePaymentUpdate.js
│               validateReference.js✅
│               validateStatus.js✅
│
├───config
│       jwtConfig.js
│       loanConfig.js
│       mock.loans.db.config.js
│       mock.users.db.config.js
│       passwordSecretConfig.js
│       registerData.js
│       userConfig.js
│
├───controllers
│       authController.mjs
│       financialProfileController.mjs
│       loanController.mjs
│       profileController.mjs
│       userController.mjs
│
├───db
│   │   initDatabase.js
│   │   listTables.js
│   │   models.js
│   │   pool.mjs
│   │   runDrop.js
│   │   runMigrations.js
│   │   schema.sql
│   │   setupDatabase.js
│   │
│   └───migrations
│           createFinancialProfilesTable.js
│           createLoansTable.js
│           createUsersTable.js
│           dropTables.js
│           showTableContent.js
│
├───entities
│       financialProfileEntity.js✅
│       loanEntity.js
│       paymentEntity.js
│       profileEntity.js
│       scheduleEntity.js
│       userEntity.js
│
├───errors
│       AppError.js
│       authErrors.js
│       errorRegistry.js
│       financialProfileErrors.js
│       loanErrors.js
│       mapError.js
│       paymentErrors.js
│       profileErrors.js
│       registrationErrors.js
│       scheduleErrors.js
│       tokenError.js
│       TokenGenerationError.js
│       userErrors.js
│
├───helpers
│   └───transformers
│           paymentTransformer.js
│
├───middlewares
│       authMiddleware.js
│       errorHandler.js
│
├───models
│       financialProfileModel.js
│       loanModel.js
│       paymentModel.js
│       profileModel.js
│       scheduleModel.js
│       userModel.js
│
├───repositories
│       financialProfileRepository.js
│       loanRepository.js
│       paymentRepository.js
│       profileRepository.js
│       scheduleRepository.js
│       userRepository.js
│
├───routes
│   ├───auth
│   │       auth.route.js
│   │
│   ├───financialProfile
│   │       financialProfile.route.js
│   │
│   ├───loan
│   │       loanRoutes.js
│   │
│   ├───profile
│   │       profile.route.js
│   │
│   └───user
│           userRoutes.js
│
├───services
│   ├───auth
│   │       registerUser.mjs
│   │
│   ├───loan
│   │       loanCalculator.js
│   │
│   └───user
│           generateUserId.js
│           user.service.js
│
├───tests
│   │   globalSetup.mjs
│   │   globalTeardown.mjs
│   │
│   ├───helpers
│   │   │   resetDatabase.js
│   │   │   testHelpers.js
│   │   │
│   │   └───payment
│   │           normalizePaymentRow.js
│   │
│   └───unit
│       ├───actors
│       │   ├───auth
│       │   │       extractToken.test.js
│       │   │       tokenExists.test.js
│       │   │       validatePayloadStructure.test.js
│       │   │       verifyPassword.test.js
│       │   │
│       │   ├───financialProfile
│       │   │       generateFinancialProfileId.test.js
│       │   │       updateFinancialProfileFields.test.js
│       │   │
│       │   ├───loan
│       │   │       generateLoanId.test.js
│       │   │
│       │   ├───normalizers
│       │   │   └───payment
│       │   │           normalizePayment.test.js
│       │   │
│       │   ├───profile
│       │   │       updateProfileFields.test.js
│       │   │
│       │   ├───users
│       │   │       normalizeEmail.test.js
│       │   │
│       │   ├───utils
│       │   │       hasControlChars.test.js
│       │   │       hasEmoji.test.js
│       │   │       hasWhiteSpaces.test.js
│       │   │       isNotSymbol.test.js
│       │   │
│       │   └───validators
│       │       ├───auth
│       │       │       loginResponse.test.js
│       │       │       validateEmailInput.test.js
│       │       │
│       │       ├───loan
│       │       │       validateLoanInput.test.js
│       │       │
│       │       └───payment
│       │               validateAmount.test.js
│       │               validateCurrency.test.js
│       │               validateDueDate.test.js
│       │               validateNotes.test.js
│       │               validatePaidAt.test.js
│       │               validatePaymentMethod.test.js
│       │               validateReference.test.js
│       │               validateStatus.test.js
│       │
│       ├───entities
│       │       financialProfileEntity.test.js
│       │
│       └───repositories
└───utils
    └───auth
            comparePasswords.js
            generateSignature.js
            hashPassword.js
            invalidateUserToken.js
            refreshToken.js
            token.js
            tokenIssuer.js
            verifyToken.js


-----------------------------------------------------------------------WORKSPACE
TRELLO:https://trello.com/b/9ty2CCja/finance-advisor
--------------
MIRO:https://miro.com/welcomeonboard/WDh1Uy9JWlRjZUJQYkJuaS9wV2l2clVhbE1SVk5FVlVCbk1YSUVLRFhFY2VCdjUyN0h1VVdmNEZ0VFpxVGEwcHNDRjRvM3VHR3l4cUpoREdmRkFjdFp6b3R5dlZINCtLenBvV2s5WFlYb1Nmd0lRaGpVSVBlYkNCOStsZEtleVZyVmtkMG5hNDA3dVlncnBvRVB2ZXBnPT0hdjE=?share_link_id=208190572952
-----------------------------------------------------------------------DAY'S BACKLOG
-----------------------------------------------------------------------COURSE TASKS (must)
  1-GITHUB REPOSITORY (
    +Table of contents
      *Overview (✅)
      *Description (✅)
      *ERD (erd ✅, add it to the github REPOSITORY's content)
  ) ✅

  2-Implement authentication in your application. ✅
    Assignment: Choose and implement one of the authentication methods we covered in class:
      -JWT (JSON Web Tokens) (chosen)
      -OAuth 2.0
    Important: You must implement the authentication logic from scratch without using ready-made 
      authentication libraries. This will help you understand how these protocols 
      work under the hood. (login process ❌)

  3-Create DB schema as diagram. In your application u should have at list 3 DB tables.✅
  
  4-Your task is to implement the database you designed in your diagram by creating executable SQL scripts.✅
    It can be any SQL database. If you don't know which to use - I recommend to use PostgreSQL.
    Requirements:
      4.1-Create a comprehensive SQL script (.sql file) that generates all tables, relationships, indexes,
        and constraints from your database diagram ✅
--------------

-----------------------------------------------------------------------CORE FEATURES
🗂️ Suggested Categorization
    ✅ Core Logic
        -Basic loan calculation (✅)
        -Monthly payment calculation (✅)
        -Total repayment amount (✅)
        -Compound interest logic (✅)
        -Amortization schedule (✅)
        -Early repayment logic (✅)
        -Input validation (check)
--------------

-----------------------------------------------------------------------NON CORE FEATURES
--------------
Notes:
- Test that CRUD functinalities are working for loan entity.
- The only entity that already has the CRUD is loans, the entire others also need it. So that is pending...
- Test that all CRUD functions are working for every entity.