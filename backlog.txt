Doing now: Focusing on checkUserUniqueness()
-------------------------------------------------------------
CHECK EVERY PART OF THE SYSTEM IN ISOLATION:
C:.
‚îÇ   index.mjs
‚îÇ
‚îú‚îÄ‚îÄ‚îÄactors
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄauth
‚îÇ   ‚îÇ       extractToken.js (pending)
‚îÇ   ‚îÇ       tokenExists.js (pending)
‚îÇ   ‚îÇ       verifyPassword.js (done)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄretrievers
‚îÇ   ‚îÇ       userRetriever.js (done)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄutils
‚îÇ               isNotSymbol.js (done)
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄvalidators
‚îÇ       ‚îî‚îÄ‚îÄ‚îÄauth
‚îÇ               checkUserUniqueness.js (done)
‚îÇ               loginResponse.js (done)
‚îÇ               validateEmailInput.js (done)
‚îÇ               validateLoginInput.js (pending)
‚îÇ               validateName.js (done)
‚îÇ               validatePasswordInput.js (done)
‚îÇ               validateRegistrationInput.js (pending)
‚îÇ
‚îú‚îÄ‚îÄ‚îÄconfig
‚îÇ       jwtConfig.js (pending)
‚îÇ       loanConfig.js (pending)
‚îÇ       mock.db.config.js (pending)
‚îÇ       passwordSecretConfig.js (pending)
‚îÇ       registerData.js (pending)
‚îÇ       userConfig.js (pending)
‚îÇ
‚îú‚îÄ‚îÄ‚îÄcontrollers
‚îÇ       authController.mjs (pending)
‚îÇ       loanController.mjs (pending)
‚îÇ       profileController.mjs (pending)
‚îÇ
‚îú‚îÄ‚îÄ‚îÄentities
‚îÇ       userEntity.js (pending)
‚îÇ
‚îú‚îÄ‚îÄ‚îÄerrors
‚îÇ       AppError.js (pending)
‚îÇ       authErrors.js (pending)
‚îÇ       mapError.js (pending)
‚îÇ       profileErrors.js (pending)
‚îÇ       registrationErrors.js (pending)
‚îÇ       tokenError.js (pending)
‚îÇ       TokenGenerationError.js (pending)
‚îÇ
‚îú‚îÄ‚îÄ‚îÄmiddlewares
‚îÇ       authMiddleware.js (pending)
‚îÇ       errorHandler.js (pending)
‚îÇ
‚îú‚îÄ‚îÄ‚îÄmodels
‚îÇ       loanModel.js (pending)
‚îÇ       userModel.js (pending)
‚îÇ
‚îú‚îÄ‚îÄ‚îÄrepositories
‚îÇ       userRepo.js (pending)
‚îÇ
‚îú‚îÄ‚îÄ‚îÄroutes
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄauth
‚îÇ   ‚îÇ       auth.route.js (pending)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄloan
‚îÇ   ‚îÇ       loanRoutes.js (pending)
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄprofile
‚îÇ           profile.route.js (pending)
‚îÇ
‚îú‚îÄ‚îÄ‚îÄservices
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄauth
‚îÇ   ‚îÇ       registerUser.mjs (pending)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄloan
‚îÇ   ‚îÇ       loanCalculator.js (pending)
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄuser
‚îÇ           generateUserId.js (pending)
‚îÇ           user.service.js (pending)
‚îÇ
‚îú‚îÄ‚îÄ‚îÄtests
‚îÇ       registerUser.test.mjs (pending)
‚îÇ
‚îî‚îÄ‚îÄ‚îÄutils
    ‚îî‚îÄ‚îÄ‚îÄauth
            comparePasswords.js (pending)
            generateSignature.js (pending)
            hashPassword.js (pending)
            invalidateUserToken.js (pending)
            refreshToken.js (pending)
            token.js (pending)
            tokenIssuer.js (pending)
            verifyToken.js (pending)



-----------------------------------------------------------------------WORKSPACE
TRELLO:https://trello.com/b/9ty2CCja/finance-advisor
--------------

-----------------------------------------------------------------------DAY'S BACKLOG

- Use POSTMAN for register attempt [done]
- Use POSTMAN for login attempt [done]
- Use POSTMAN for secured routes access attempt [DONE]

Please make sure that before each testing case actors are pure as much as possible. 
  +registerController[done]
  +loginController[done]

- CHECK TESTCASES:
  + TC-001 [] -> Valid registration -> login -> access to protected route.
    -> Input / Preconditions:
      + Purify actors as much as possible [solved]
    -> Actor: AuthService (encapsulation needed because AuthService is missing)
    -> Expected result: 200 OK + resource data.
    -> Status: Pending.
    RESULTS:
      -ERROR WHEN TRYING TO REGISTER WITH THE SAME INPUT MORE THAN ONCE
        ~check what happens when find an existing email in registering process [solved]
  + TC-002 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-003 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-004 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-005 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-006 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-007 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-008 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-009 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-010 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-011 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-012 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-013 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
--------------

-----------------------------------------------------------------------COURSE TASKS (must)

  -GITHUB REPOSITORY (
    +Table of contents
      *Overview (done)
      *Description (done)
      *ERD (erd done, add it to the github REPOSITORY's content)
  )

  -Implement authentication in your application.
    Assignment: Choose and implement one of the authentication methods we covered in class:
      -JWT (JSON Web Tokens) (chosen)
      -OAuth 2.0
    Important: You must implement the authentication logic from scratch without using ready-made 
      authentication libraries. This will help you understand how these protocols 
      work under the hood. (login process pending)
  -Create DB schema as diagram. In your application u should have at list 3 DB tables.
  -Your task is to implement the database you designed in your diagram by creating executable SQL scripts.
    It can be any SQL database. If you don't know which to use - I recommend to use PostgreSQL.
    Requirements:
      -Create a comprehensive SQL script (.sql file) that generates all tables, relationships, indexes,
        and constraints from your database diagram
--------------

-----------------------------------------------------------------------CORE FEATURES
üóÇÔ∏è Suggested Categorization
    ‚úÖ Core Logic
        -Basic loan calculation (done)
        -Monthly payment calculation (done)
        -Total repayment amount (done)
        -Compound interest logic (done)
        -Amortization schedule (done)
        -Early repayment logic (done)
        -Input validation (check)
--------------

-----------------------------------------------------------------------NOT CORE FEATURES
--------------