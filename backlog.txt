-----------------------------------------------------------------------WORKSPACE
TRELLO:https://trello.com/b/9ty2CCja/finance-advisor
--------------

-----------------------------------------------------------------------DAY'S BACKLOG

- Use POSTMAN for register attempt [done]
- Use POSTMAN for login attempt [done]
- Use POSTMAN for secured routes access attempt [DONE]

Please make sure that before each testing case actors are pure as much as possible. 
  +registerController[done]
  +loginController[done]

- CHECK TESTCASES:
  + TC-001 [] -> Valid registration -> login -> access to protected route.
    -> Input / Preconditions:
      + Pure actors []
    -> Actor: AuthService (encapsulation needed because AuthService is missing)
    -> Expected result: 200 OK + resource data.
    -> Status: Pending.
  + TC-002 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-003 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-004 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-005 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-006 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-007 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-008 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-009 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-010 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-011 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-012 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
  + TC-013 [] ->
    -> Input / Preconditions:
    -> Actor:
    -> Expected result:
    -> Status:
--------------

-----------------------------------------------------------------------COURSE TASKS (must)

  -GITHUB REPOSITORY (
    +Table of contents
      *Overview (done)
      *Description (done)
      *ERD (erd done, add it to the github REPOSITORY's content)
  )

  -Implement authentication in your application.
    Assignment: Choose and implement one of the authentication methods we covered in class:
      -JWT (JSON Web Tokens) (chosen)
      -OAuth 2.0
    Important: You must implement the authentication logic from scratch without using ready-made 
      authentication libraries. This will help you understand how these protocols 
      work under the hood. (login process pending)
  -Create DB schema as diagram. In your application u should have at list 3 DB tables.
  -Your task is to implement the database you designed in your diagram by creating executable SQL scripts.
    It can be any SQL database. If you don't know which to use - I recommend to use PostgreSQL.
    Requirements:
      -Create a comprehensive SQL script (.sql file) that generates all tables, relationships, indexes,
        and constraints from your database diagram
--------------

-----------------------------------------------------------------------CORE FEATURES
üóÇÔ∏è Suggested Categorization
    ‚úÖ Core Logic
        -Basic loan calculation (done)
        -Monthly payment calculation (done)
        -Total repayment amount (done)
        -Compound interest logic (done)
        -Amortization schedule (done)
        -Early repayment logic (done)
        -Input validation (check)
--------------

-----------------------------------------------------------------------NOT CORE FEATURES
--------------