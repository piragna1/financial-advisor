-------------------------------------------------------------
C:.
│   index.mjs
│
├───actors
│   ├───auth
│   │       extractToken.js (tested)
│   │       tokenExists.js (tested)
│   │       validatePayloadStructure.js (tested)
│   │       verifyPassword.js (tested)
│   │
│   ├───financialProfile
│   │       createMockFinancialProfile.js
│   │       generateFinancialProfileId.js
│   │       updateFinancialProfileFields.js
│   │
│   ├───loan
│   │       createLoan.js
│   │       createMockLoan.js
│   │       generateLoanId.js
│   │       generateValidLoan.js
│   │       simulateLoan.js
│   │
│   ├───normalizers
│   │   └───payment
│   │           normalizePayment.js
│   │
│   ├───payment
│   │       createMockPaymentChain.js
│   │
│   ├───profile
│   │       updateProfileFields.js
│   │
│   ├───retrievers
│   │       userRetriever.js
│   │
│   ├───schedule
│   │       createMockScheduleChain.js
│   │
│   ├───users
│   │       checkEmailAvailability.js
│   │       createMockUser.js
│   │       generateValidUser.js
│   │       normalizeEmail.js
│   │
│   ├───utils
│   │       hasControlChars.js
│   │       hasEmoji.js
│   │       hasWhiteSpaces.js
│   │       isNotSymbol.js
│   │
│   └───validators
│       ├───auth
│       │       checkUserUniqueness.js
│       │       loginResponse.js
│       │       validateEmailInput.js
│       │       validateLoginInput.js
│       │       validateName.js
│       │       validatePasswordInput.js
│       │       validateRegistrationInput.js
│       │
│       ├───loan
│       │       validateLoanInput.js
│       │       validateLoanUpdate.js
│       │
│       └───payment
│               validatePaymentId.js
│               validatePaymentInput.js
│               validatePaymentUpdate.js
│
├───config
│       jwtConfig.js
│       loanConfig.js
│       mock.loans.db.config.js
│       mock.users.db.config.js
│       passwordSecretConfig.js
│       registerData.js
│       userConfig.js
│
├───controllers
│       authController.mjs
│       financialProfileController.mjs
│       loanController.mjs
│       profileController.mjs
│       userController.mjs
│
├───db
│   │   initDatabase.js
│   │   listTables.js
│   │   models.js
│   │   pool.mjs
│   │   runDrop.js
│   │   runMigrations.js
│   │   schema.sql
│   │   setupDatabase.js
│   │
│   └───migrations
│           createFinancialProfilesTable.js
│           createLoansTable.js
│           createUsersTable.js
│           dropTables.js
│           showTableContent.js
│
├───entities
│       financialProfileEntity.js
│       loanEntity.js
│       paymentEntity.js
│       profileEntity.js
│       scheduleEntity.js
│       userEntity.js
│
├───errors
│       AppError.js
│       authErrors.js
│       errorRegistry.js
│       financialProfileErrors.js
│       loanErrors.js
│       mapError.js
│       paymentErrors.js
│       profileErrors.js
│       registrationErrors.js
│       scheduleErrors.js
│       tokenError.js
│       TokenGenerationError.js
│       userErrors.js
│
├───middlewares
│       authMiddleware.js
│       errorHandler.js
│
├───models
│       financialProfileModel.js
│       loanModel.js
│       paymentModel.js
│       profileModel.js
│       scheduleModel.js
│       userModel.js
│
├───repositories
│       financialProfileRepository.js
│       loanRepository.js
│       paymentRepository.js
│       profileRepository.js
│       scheduleRepository.js
│       userRepository.js
│
├───routes
│   ├───auth
│   │       auth.route.js
│   │
│   ├───financialProfile
│   │       financialProfile.route.js
│   │
│   ├───loan
│   │       loanRoutes.js
│   │
│   ├───profile
│   │       profile.route.js
│   │
│   └───user
│           userRoutes.js
│
├───services
│   ├───auth
│   │       registerUser.mjs
│   │
│   ├───loan
│   │       loanCalculator.js
│   │
│   └───user
│           generateUserId.js
│           user.service.js
│
├───tests
│   │   globalSetup.mjs
│   │   globalTeardown.mjs
│   │
│   ├───helpers
│   │   │   resetDatabase.js
│   │   │   testHelpers.js
│   │   │
│   │   └───payment
│   │           normalizePaymentRow.js
│   │
│   └───unit
│       └───repositories
│           ├───financialProfile
│           │       createFinancialProfile.test.js
│           │       deleteFinancialProfile.test.js
│           │       readFinancialProfileByUserId.test.js
│           │       updateFinancialProfile.test.js
│           │
│           ├───loan
│           │       deleteLoan.test.js
│           │       getLoanBydId.test.js
│           │       getLoans.test.js
│           │       saveLoan.test.js
│           │       updateLoan.test.js
│           │
│           ├───payment
│           │       createPayment.test.js
│           │       deletePayment.test.js
│           │       getPayment.test.js
│           │       updatePayment.test.js
│           │
│           ├───profile
│           │       createProfile.test.js
│           │       deleteProfile.test.js
│           │       getProfileById.test.js
│           │       getProfileByUserId.test.js
│           │       updateProfile.test.js
│           │
│           ├───schedule
│           │       createSchedule.test.js
│           │       deleteSchedule.test.js
│           │       getScheduleById.test.js
│           │       updateSchedule.test.js
│           │
│           └───user
│                   checkEmailAvailability.test.js
│                   deleteUser.test.js
│                   findUserByEmail.test.js
│                   findUserById.test.js
│                   saveUser.test.js
│                   updateUser.test.js
│
└───utils
    └───auth
            comparePasswords.js
            generateSignature.js
            hashPassword.js
            invalidateUserToken.js
            refreshToken.js
            token.js
            tokenIssuer.js
            verifyToken.js


-----------------------------------------------------------------------WORKSPACE
TRELLO:https://trello.com/b/9ty2CCja/finance-advisor
--------------
MIRO:https://miro.com/welcomeonboard/WDh1Uy9JWlRjZUJQYkJuaS9wV2l2clVhbE1SVk5FVlVCbk1YSUVLRFhFY2VCdjUyN0h1VVdmNEZ0VFpxVGEwcHNDRjRvM3VHR3l4cUpoREdmRkFjdFp6b3R5dlZINCtLenBvV2s5WFlYb1Nmd0lRaGpVSVBlYkNCOStsZEtleVZyVmtkMG5hNDA3dVlncnBvRVB2ZXBnPT0hdjE=?share_link_id=208190572952
-----------------------------------------------------------------------DAY'S BACKLOG
-----------------------------------------------------------------------COURSE TASKS (must)
  1-GITHUB REPOSITORY (
    +Table of contents
      *Overview (✅)
      *Description (✅)
      *ERD (erd ✅, add it to the github REPOSITORY's content)
  ) ✅

  2-Implement authentication in your application. ✅
    Assignment: Choose and implement one of the authentication methods we covered in class:
      -JWT (JSON Web Tokens) (chosen)
      -OAuth 2.0
    Important: You must implement the authentication logic from scratch without using ready-made 
      authentication libraries. This will help you understand how these protocols 
      work under the hood. (login process ❌)

  3-Create DB schema as diagram. In your application u should have at list 3 DB tables.✅
  
  4-Your task is to implement the database you designed in your diagram by creating executable SQL scripts.✅
    It can be any SQL database. If you don't know which to use - I recommend to use PostgreSQL.
    Requirements:
      4.1-Create a comprehensive SQL script (.sql file) that generates all tables, relationships, indexes,
        and constraints from your database diagram ✅
--------------

-----------------------------------------------------------------------CORE FEATURES
🗂️ Suggested Categorization
    ✅ Core Logic
        -Basic loan calculation (✅)
        -Monthly payment calculation (✅)
        -Total repayment amount (✅)
        -Compound interest logic (✅)
        -Amortization schedule (✅)
        -Early repayment logic (✅)
        -Input validation (check)
--------------

-----------------------------------------------------------------------NON CORE FEATURES
--------------
Notes:
- Test that CRUD functinalities are working for loan entity.
- The only entity that already has the CRUD is loans, the entire others also need it. So that is pending...
- Test that all CRUD functions are working for every entity.